// ÎßàÏù¥ÌéòÏù¥ÏßÄ - Í¥ÄÏã¨Í≥µÏó∞ => api Ïó∞Í≤∞ ÏôÑÎ£å 
// ÌïòÌä∏ Ï£ºÏÑùÏ≤òÎ¶¨Ìï¥ÎÜìÏùå (2ÌïôÍ∏∞)

import React, { useState, useEffect } from "react";
import Nav from "../components/nav";
import { Link, useNavigate } from "react-router-dom";
import "../css/mypage.css";
import mockFavorites from "../mocks/favorites";

const Favorites = () => {
  const navigate = useNavigate();
  const [favorites, setFavorites] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  const token =
    localStorage.getItem("token") || sessionStorage.getItem("token");

  useEffect(() => {
    if (!token) {
      alert("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌïú ÏÑúÎπÑÏä§ÏûÖÎãàÎã§.");
      navigate("/login");
      return;
    }

    const fetchFavorites = async () => {
      try {
        const response = await fetch("/api/calendar/like", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) throw new Error("API ÏöîÏ≤≠ Ïã§Ìå®");

        const data = await response.json();
        const likeList = data.userLikeList || [];
        setFavorites(likeList);; // Í¥ÄÏã¨ Í≥µÏó∞Ïù¥ ÏóÜÏúºÎ©¥ Îπà Î∞∞Ïó¥Î°ú Ï≤òÎ¶¨Îê®
      } catch (error) {
        console.error("API Ïò§Î•ò Î∞úÏÉù, mocks Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©:", error);
        setFavorites(mockFavorites);
      } finally {
        setIsLoading(false);
      }
    };

    fetchFavorites();
  }, [token, navigate]);

  const handleLogout = async () => {
    const confirmed = window.confirm("Î°úÍ∑∏ÏïÑÏõÉ ÌïòÏãúÍ≤†ÏäµÎãàÍπå?");
    if (!confirmed) return;

    try {
      const token =
        localStorage.getItem("token") || sessionStorage.getItem("token");
      if (!token) throw new Error("Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÍ∞Ä ÏïÑÎãôÎãàÎã§.");

      const response = await fetch("/api/auth/logout", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.message || "ÏÑúÎ≤ÑÏóêÏÑú Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨ Ïã§Ìå®");
      }

      localStorage.removeItem("token");
      sessionStorage.removeItem("token");

      alert("Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Î°úÍ∑∏ÏïÑÏõÉÎêòÏóàÏäµÎãàÎã§.");
      navigate("/"); // Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎÇò ÌôàÏúºÎ°ú Ïù¥Îèô
    } catch (error) {
      alert(`Î°úÍ∑∏ÏïÑÏõÉ Ïò§Î•ò: ${error.message}`);
      console.error("Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®:", error);
    }
  };

  const handleWithdraw = () => {
    const confirmed = window.confirm("ÌöåÏõê ÌÉàÌá¥ ÌïòÏãúÍ≤†ÏäµÎãàÍπå?");
    if (confirmed) {
      const token =
        localStorage.getItem("token") || sessionStorage.getItem("token"); // Ïó¨Í∏∞Ïóê ÌÜ†ÌÅ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ï∂îÍ∞Ä
      fetch("/api/users/me", {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })
        .then((res) => {
          if (res.ok) {
            localStorage.clear(); // Î™®Îì† ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï†úÍ±∞
            sessionStorage.clear();
            alert("ÌöåÏõê ÌÉàÌá¥Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.");
            navigate("/"); // Ìôà ÎòêÎäî ÌÉàÌá¥ ÏôÑÎ£å ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
          } else {
            return res.json().then((data) => {
              throw new Error(data.message || "ÌÉàÌá¥ Ï≤òÎ¶¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
            });
          }
        })
        .catch((error) => {
          alert(`ÏóêÎü¨: ${error.message}`);
        });
    }
  };

  // const [likedStates, setLikedStates] = useState(() => {
  //   const initialState = {};
  //   favorites.forEach((fav) => {
  //     initialState[fav.id] = false; // Î∞±ÏóîÎìúÏóêÏÑú Ï†ïÎ≥¥ Î∞õÏïÑÏôÄ Í∏∞Ï°¥Ïóê Ï†ÄÏû•ÎêòÏñ¥ ÏûàÎäî Ï†ïÎ≥¥ÎåÄÎ°ú Îã¨Î†•Ïóê ÌëúÏãúÎêòÍ≥† ÏûàÎçò Í≥µÏó∞Îì§Îßå Ï±ÑÏö¥ ÌïòÌä∏ ÌëúÏãú ÏòàÏ†ï
  //   });
  //   return initialState;
  // });

  // const toggleHeart = (id) => {
  //   setLikedStates((prev) => ({
  //     ...prev,
  //     [id]: !prev[id],
  //   }));
  // };

  return (
    <div>
      <Nav />
      <div className="mypage-container">
        {/* ÏôºÏ™Ω Î©îÎâ¥ ÌÉ≠ */}
        <div className="mypage-left">
          <div className="menu">
            <h2 className="menu-name">ÎÇ¥ Ï†ïÎ≥¥ ÏÑ§Ï†ï</h2>
            <ul className="menu-item">
              <li>
                <Link to="/account">Í≥ÑÏ†ï ÏÑ§Ï†ï</Link>
              </li>
              <li>
                <Link to="/myposts">ÎÇòÏùò Í∏Ä</Link>
              </li>
              <li>
                <Link to="/favorites">Í¥ÄÏã¨ Í≥µÏó∞</Link>
              </li>
              <li>
                <Link to="/passwordchange">ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω</Link>
              </li>
              <li>
                <button onClick={handleLogout} className="text-button">
                  Î°úÍ∑∏ÏïÑÏõÉ
                </button>
              </li>
              <li>
                <button onClick={handleWithdraw} className="text-button">
                  ÌöåÏõê ÌÉàÌá¥
                </button>
              </li>
            </ul>
          </div>
          <div>
            <h2 className="menu-name">ÏÑúÎπÑÏä§ ÏïΩÍ¥Ä</h2>
            <ul className="menu-item">
              <li>
                <Link to="/terms">ÏÑúÎπÑÏä§ Ïù¥Ïö© ÏïΩÍ¥Ä</Link>
              </li>
              <li>
                <Link to="/privacy">Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨ Î∞©Ïπ®</Link>
              </li>
            </ul>
          </div>
        </div>

        <div className="account-right">
          <div>
            <h3 id="account_title">Í¥ÄÏã¨ Í≥µÏó∞</h3>
          </div>
          <div className="show-grid">
            {favorites.map((show) => (
              <div key={show.id} className="show-card">
                <div className="favorite-poster-wrapper">
                  <img
                    src={show.poster}
                    alt={show.title}
                    onClick={() => navigate(`/performance/${show.pfm_doc_id}`)}
                    style={{ cursor: "pointer" }}
                  />
                  {/* <span
                    className="heart-icon"
                    onClick={() => toggleHeart(show.id)}
                  >
                    {likedStates[show.id] ? "‚ù§Ô∏è" : "ü§ç"}
                  </span> */}
                </div>
                <p>{show.title}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Favorites;
